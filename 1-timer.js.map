{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport iziToast from 'izitoast';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nlet userSelectedDate = null;\nconst startButton = document.querySelector('button[data-start]');\nconst inputDate = document.querySelector('#datetime-picker');\nstartButton.disabled = true;\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return value.toString().padStart(2, '0');\n}\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    ///validation\n    if (selectedDates[0].getTime() <= Date.now()) {\n      iziToast.show({\n        message: 'Please choose a date in the future',\n        position: 'topRight',\n        color: '#EF4040',\n        messageColor: '#fff',\n        icon: 'img',\n        iconUrl: './img/error.png',\n      });\n      startButton.disabled = true;\n      return;\n    }\n    startButton.disabled = false;\n    startButton.classList.add('button-normal');\n\n    userSelectedDate = selectedDates[0];\n  },\n};\n\nstartButton.addEventListener('click', clickHandler);\n\nfunction clickHandler() {\n  startButton.disabled = true;\n  inputDate.disabled = true;\n\n  const intervalId = setInterval(() => {\n    const ms = userSelectedDate.getTime() - Date.now();\n    if (ms <= 0) {\n      inputDate.disabled = false;\n      clearInterval(intervalId);\n      return;\n    }\n    const currentTime = convertMs(ms);\n    Object.keys(currentTime).forEach(key => {\n      document.querySelector(`.value[data-${key}]`).textContent =\n        addLeadingZero(currentTime[key]);\n    });\n  }, 1000);\n}\n\nflatpickr('#datetime-picker', options);\n"],"names":["userSelectedDate","startButton","inputDate","convertMs","ms","days","hours","minutes","seconds","addLeadingZero","value","options","selectedDates","iziToast","clickHandler","intervalId","currentTime","key","flatpickr"],"mappings":"+IAKA,IAAIA,EAAmB,KACvB,MAAMC,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAY,SAAS,cAAc,kBAAkB,EAC3DD,EAAY,SAAW,GAEvB,SAASE,EAAUC,EAAI,CAQrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAOA,EAAM,SAAU,EAAC,SAAS,EAAG,GAAG,CACzC,CAEA,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CAErB,GAAIA,EAAc,CAAC,EAAE,QAAO,GAAM,KAAK,MAAO,CAC5CC,EAAS,KAAK,CACZ,QAAS,qCACT,SAAU,WACV,MAAO,UACP,aAAc,OACd,KAAM,MACN,QAAS,iBACjB,CAAO,EACDZ,EAAY,SAAW,GACvB,MACD,CACDA,EAAY,SAAW,GACvBA,EAAY,UAAU,IAAI,eAAe,EAEzCD,EAAmBY,EAAc,CAAC,CACnC,CACH,EAEAX,EAAY,iBAAiB,QAASa,CAAY,EAElD,SAASA,GAAe,CACtBb,EAAY,SAAW,GACvBC,EAAU,SAAW,GAErB,MAAMa,EAAa,YAAY,IAAM,CACnC,MAAMX,EAAKJ,EAAiB,QAAS,EAAG,KAAK,IAAG,EAChD,GAAII,GAAM,EAAG,CACXF,EAAU,SAAW,GACrB,cAAca,CAAU,EACxB,MACD,CACD,MAAMC,EAAcb,EAAUC,CAAE,EAChC,OAAO,KAAKY,CAAW,EAAE,QAAQC,GAAO,CACtC,SAAS,cAAc,eAAeA,CAAG,GAAG,EAAE,YAC5CR,EAAeO,EAAYC,CAAG,CAAC,CACvC,CAAK,CACF,EAAE,GAAI,CACT,CAEAC,EAAU,mBAAoBP,CAAO"}